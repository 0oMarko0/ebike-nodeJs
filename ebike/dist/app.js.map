{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;;;AAAA,kEAAoC;AACpC,sDAAmE;AACnE,gEAAwC;AACxC,8DAAqC;AACrC,gDAAwB;AACxB,mCAAgC;AAChC,2CAA8C;AAC9C,4EAAkD;AAClD,MAAM,eAAe,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAEpE,eAAM,CAAC,EAAE,IAAI,EAAE,GAAG,uBAAO,OAAO,EAAE,CAAC,CAAC;AACpC,kBAAQ,CAAC,UAAU,EAAE,CAAC;AAEtB,yDAAsC;AACtC,0DAAwC;AAExC,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;AAEtB,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AAE1C,GAAG,CAAC,GAAG,CAAC,cAAI,EAAE,CAAC,CAAC;AAChB,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACnD,GAAG,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC;AACtB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,4BAAgB,CAAC,KAAK,EAAE,4BAAgB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;AAEpF,GAAG,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACpE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;IAChC,GAAG,CAAC,IAAI,CAAC,eAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC;AAEH,cAAS,CAAC,GAAG,CAAC,CAAC;AAEf,kBAAe,GAAG,CAAC","sourcesContent":["import appRoot from \"app-root-path\";\nimport Express, { Request, Response, NextFunction } from \"express\";\nimport Registry from \"./utils/registry\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport { config } from \"dotenv\";\nimport { morganLogger } from \"./utils/logger\";\nimport swaggerUiExpress from \"swagger-ui-express\";\nconst swaggerDocument = require('../docs/Ebike-1.0.0-swagger.json');\n\nconfig({ path: `${appRoot}/.env` });\nRegistry.initialise();\n\nimport initRoute from \"./routes/root\";\nimport formatError from \"./utils/error\";\n\nconst app = Express();\n\napp.set(\"port\", process.env.PORT || 4200);\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(morganLogger);\napp.use('/readme', swaggerUiExpress.serve, swaggerUiExpress.setup(swaggerDocument));\n\napp.use((error: any, req: Request, res: Response, next: NextFunction) => {\n    res.status(error.status || 500);\n    res.send(formatError('Internal Server Error', req, error.status));\n});\n\ninitRoute(app);\n\nexport default app;\n"]}