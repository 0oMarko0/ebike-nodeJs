{"version":3,"file":"user-controller.js","sourceRoot":"","sources":["../../src/controller/user-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,wDAA8B;AAI9B,gEAA+B;AAE/B,MAAqB,cAAc;IAE/B,YAAY,QAAkB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEK,UAAU,CAAC,IAAU;;YACvB,MAAM,aAAa,GAAS,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvE,IAAI,aAAa,IAAI,kBAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,EAAE;gBAC5E,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAC9B,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;gBAC5D,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACjC;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;aAC5D;QACL,CAAC;KAAA;IAEK,aAAa,CAAC,IAAU;;YAC1B,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC5C,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,QAAQ,GAAG,kBAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE3C,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;KAAA;IAEK,MAAM,CAAC,IAAU;;YACnB,MAAM,aAAa,GAAS,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvE,aAAa,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC/B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QACvE,CAAC;KAAA;IAEO,WAAW,CAAC,IAAU;QAC1B,OAAO;YACH,KAAK,EAAE,sBAAG,CAAC,IAAI,CACX;gBACI,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,EAAE,EAAE,IAAI,CAAC,EAAE;aACd,EACD,OAAO,CAAC,GAAG,CAAC,UAAU,CACzB;SACJ,CAAC;IACN,CAAC;CACJ;AAhDD,iCAgDC","sourcesContent":["import bcrypt from \"bcryptjs\";\nimport UserRepo from \"../data/repository/user-repo\";\nimport User from \"../model/user\";\nimport { Token } from \"./controller\";\nimport jwt from \"jsonwebtoken\";\n\nexport default class UserController {\n    private userRepo: UserRepo;\n    constructor(userRepo: UserRepo) {\n        this.userRepo = userRepo;\n    }\n\n    async signInUser(user: User): Promise<Token> {\n        const retrievedUser: User = await this.userRepo.getByEmail(user.email);\n        if (retrievedUser && bcrypt.compareSync(user.password, retrievedUser.password)) {\n            retrievedUser.isActive = true;\n            await this.userRepo.update(retrievedUser.id, retrievedUser);\n            return this.createToken(user);\n        } else {\n            throw new Error(\"The password or the email are invalid\");\n        }\n    }\n\n    async createNewUser(user: User): Promise<Token> {\n        if (await this.userRepo.getByEmail(user.email)) {\n            throw new Error(\"Email already in use\");\n        }\n\n        user.password = bcrypt.hashSync(user.password, 10);\n        user.isAdmin = false;\n        user.isActive = true;\n        user.id = await this.userRepo.create(user);\n\n        return this.createToken(user);\n    }\n\n    async logout(user: User) {\n        const retrievedUser: User = await this.userRepo.getByEmail(user.email);\n        retrievedUser.isActive = false;\n        return await this.userRepo.update(retrievedUser.id, retrievedUser);\n    }\n\n    private createToken(user: User): Token {\n        return {\n            token: jwt.sign(\n                {\n                    email: user.email,\n                    isAdmin: user.isAdmin,\n                    id: user.id,\n                },\n                process.env.JWT_SECRET,\n            ),\n        };\n    }\n}\n"]}