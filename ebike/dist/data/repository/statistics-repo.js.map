{"version":3,"file":"statistics-repo.js","sourceRoot":"","sources":["../../../src/data/repository/statistics-repo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,8DAAwC;AACxC,+EAAmD;AAEnD,MAAqB,cAAc;IACzB,iBAAiB;;YACnB,MAAM,SAAS,GAAG;gBACd;oBACI,MAAM,EAAE;wBACJ,GAAG,EAAE,EAAE;wBACP,WAAW,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE;qBAC1C;iBACJ;gBACD;oBACI,QAAQ,EAAE;wBACN,GAAG,EAAE,CAAC;qBACT;iBACJ;aACJ,CAAC;YAEF,OAAO,IAAI,CAAC,aAAa,CAAC,yBAAW,CAAC,OAAO,CAAC;iBACzC,SAAS,CAAC,SAAS,CAAC;iBACpB,IAAI,EAAE,CAAC;QAChB,CAAC;KAAA;IAEK,aAAa;;YACf,OAAO,IAAI,CAAC,aAAa,CAAC,yBAAW,CAAC,IAAI,CAAC;iBACtC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;iBACxB,KAAK,EAAE,CAAC;QACjB,CAAC;KAAA;IAEK,YAAY;;YACd,OAAO,IAAI,CAAC,aAAa,CAAC,yBAAW,CAAC,IAAI,CAAC;iBACtC,IAAI,EAAE;iBACN,KAAK,EAAE,CAAC;QACjB,CAAC;KAAA;IAEK,qBAAqB;;YACvB,OAAO,IAAI,CAAC,aAAa,CAAC,yBAAW,CAAC,UAAU,CAAC;iBAC5C,IAAI,EAAE;iBACN,KAAK,EAAE,CAAC;QACjB,CAAC;KAAA;IAEO,aAAa,CAAC,UAAkB;QACpC,OAAO,eAAO,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;CACJ;AA1CD,iCA0CC","sourcesContent":["import { Collection } from \"mongodb\";\nimport MongoDB from \"../database/mongo\";\nimport collections from \"../utils/mongoCollection\";\n\nexport default class StatisticsRepo {\n    async getBikePathLength() {\n        const aggregate = [\n            {\n                $group: {\n                    _id: \"\",\n                    totalLength: { $sum: \"$segmentLength\" },\n                },\n            },\n            {\n                $project: {\n                    _id: 0,\n                },\n            },\n        ];\n\n        return this.getCollection(collections.journey)\n            .aggregate(aggregate)\n            .next();\n    }\n\n    async getActiveUser() {\n        return this.getCollection(collections.user)\n            .find({ isActive: true })\n            .count();\n    }\n\n    async getTotalUser(): Promise<number> {\n        return this.getCollection(collections.user)\n            .find()\n            .count();\n    }\n\n    async getNumberOfRestaurant(): Promise<number> {\n        return this.getCollection(collections.restaurant)\n            .find()\n            .count();\n    }\n\n    private getCollection(collection: string): Collection {\n        return MongoDB.getDb().collection(collection);\n    }\n}\n"]}