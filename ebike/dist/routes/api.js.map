{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/routes/api.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from \"express\";\nimport UserController from \"../controller/user-controller\";\nimport Registry from \"../utils/registry\";\nimport { Injectable } from \"../utils/injectable\";\nimport { check } from \"express-validator\";\nimport User from \"../model/user\";\nimport logger from \"../utils/logger\";\nimport StatisticsController from \"../controller/statistics-controller\";\nimport formatError from \"../utils/error\";\n\nconst router = express.Router();\n\nconst toUser = (req: Request): User => {\n    return {\n        email: req.body.email,\n        password: req.body.password,\n    };\n};\n\nrouter.get(\"/statistics\", async (req, res) => {\n    const statistics: StatisticsController = Registry.resolve(Injectable.StatisticsController);\n    res.send(await statistics.getGlobalStatistics()).status(200);\n});\n\nrouter.post(\n    \"/signup\",\n    [\n        check(\"email\", \"Must be a valid Email\").isEmail(),\n        check(\"password\", \"Must be longer than 6 character\").isLength({ min: 6 }),\n    ],\n    async (req: Request, res: Response) => {\n        const userController: UserController = Registry.resolve(Injectable.UserController);\n        try {\n            res.status(201).send(await userController.createNewUser(toUser(req)));\n        } catch (e) {\n            logger.error(e.message);\n            res.status(412).send(formatError(e.message, req, 412));\n        }\n    },\n);\n\nrouter.post(\n    \"/signin\",\n    [\n        check(\"email\", \"Must be a valid email\").isEmail(),\n        check(\"password\", \"Must be longer than 6 character\").isLength({ min: 6 }),\n    ],\n    async (req: Request, res: Response) => {\n        const userController: UserController = Registry.resolve(Injectable.UserController);\n        try {\n            res.status(200).send(await userController.signInUser(toUser(req)));\n        } catch (e) {\n            logger.error(e.message);\n            res.status(400).send(formatError(e.message, req, 400));\n        }\n    },\n);\n\nrouter.post(\"/logout\", async (req: Request, res: Response) => {\n    const userController: UserController = Registry.resolve(Injectable.UserController);\n    res.status(200).send(await userController.logout(toUser(req)));\n});\nexport default router;\n"]}