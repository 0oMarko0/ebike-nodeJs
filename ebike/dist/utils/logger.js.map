{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/utils/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAA4B;AAC5B,kEAAoC;AACpC,mDAAsD;AAEtD,MAAM,EAAE,OAAO,EAAE,GAAG,iBAAO,CAAC,MAAM,CAAC;AAEnC,MAAM,YAAY,GAAG,OAAO,CACxB,iBAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,iBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,EAC1B,iBAAO,CAAC,MAAM,CAAC,KAAK,EAAE,EACtB,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;IACzB,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,KAAc,IAAI,EAAhB,sDAAgB,CAAC;IAEpD,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACpD,OAAO,GAAG,EAAE,KAAK,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAC3G,CAAC,CAAC,CACL,CAAC;AAEF,MAAM,OAAO,GAAG;IACZ,IAAI,EAAE;QACF,QAAQ,EAAE,GAAG,uBAAO,eAAe;QACnC,gBAAgB,EAAE,IAAI;QACtB,OAAO,EAAE,OAAO;QAChB,QAAQ,EAAE,CAAC;KACd;IACD,OAAO,EAAE;QACL,MAAM,EAAE,YAAY;KACvB;CACJ,CAAC;AAEF,MAAM,MAAM,GAAW,iBAAO,CAAC,YAAY,CAAC;IACxC,UAAU,EAAE,CAAC,IAAI,oBAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,oBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACxF,WAAW,EAAE,KAAK;CACrB,CAAC,CAAC;AAEH,IAAI,mBAAmB,GAAG,OAAO,CAAC;AAElC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;IACxC,mBAAmB,GAAG,KAAK,CAAC;CAC/B;AAED,MAAM,MAAM,GAAG;IACX,KAAK,EAAE,CAAC,OAAe,EAAE,EAAE;QACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;CACJ,CAAC;AAEW,QAAA,YAAY,GAAG,gBAAM,CAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;AACpE,kBAAe,MAAM,CAAC","sourcesContent":["import morgan from \"morgan\";\nimport appRoot from \"app-root-path\";\nimport winston, { Logger, transports } from \"winston\";\n\nconst { combine } = winston.format;\n\nconst loggerFormat = combine(\n    winston.format.colorize(),\n    winston.format.timestamp(),\n    winston.format.align(),\n    winston.format.printf(info => {\n        const { timestamp, level, message, ...args } = info;\n\n        const ts = timestamp.slice(0, 19).replace(\"T\", \" \");\n        return `${ts} [${level}]: ${message} ${Object.keys(args).length ? JSON.stringify(args, null, 2) : \"\"}`;\n    }),\n);\n\nconst options = {\n    file: {\n        filename: `${appRoot}/logs/app.log`,\n        handleExceptions: true,\n        maxsize: 5242880,\n        maxFiles: 5,\n    },\n    console: {\n        format: loggerFormat,\n    },\n};\n\nconst logger: Logger = winston.createLogger({\n    transports: [new transports.File(options.file), new transports.Console(options.console)],\n    exitOnError: false,\n});\n\nlet morganLoggingPolicy = \"short\";\n\nif (process.env.NODE_ENV === \"development\") {\n    morganLoggingPolicy = \"dev\";\n}\n\nconst stream = {\n    write: (message: string) => {\n        logger.info(message);\n    },\n};\n\nexport const morganLogger = morgan(morganLoggingPolicy, { stream });\nexport default logger;\n"]}