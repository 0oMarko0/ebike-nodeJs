{"version":3,"file":"registry.js","sourceRoot":"","sources":["../../src/utils/registry.ts"],"names":[],"mappings":";;AAAA,MAAqB,QAAQ;IAGzB,MAAM,CAAC,OAAO,CAAC,IAAY;QACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAClC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAY,EAAE,OAAY;QACtC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,UAAU;QACb,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAe,CAAC;SAC1C;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;CACJ;AApBD,2BAoBC","sourcesContent":["export default class Registry {\n    private static registry: Map<string, any>;\n\n    static resolve(name: string): any {\n        if (this.registry.has(name)) {\n            return this.registry.get(name);\n        }\n    }\n\n    static register(name: string, service: any): void {\n        this.registry.set(name, service);\n    }\n\n    static initialise(): Map<string, any> {\n        if (!this.registry) {\n            this.registry = new Map<string, any>();\n        }\n\n        return this.registry;\n    }\n}\n"]}